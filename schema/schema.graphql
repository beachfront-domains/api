# import Login from "login.graphql"
# import LoginKeyResponse from "login.graphql"

# import DeveloperKeyResponse from "developer.graphql";
# import DomainSearchResults from "results.graphql";

# import PaginationVariables from "pagination.graphql"

# import Customer from "customer.graphql"
# import CustomerExport from "customer.graphql"
# import CustomerInput from "customer.graphql"
# import CustomerUpdate from "customer.graphql"

# import SLD from "sld.graphql"
# import SLDInput from "sld.graphql"
# import SLDUpdate from "sld.graphql"

"""
All the queries that enable beachfront to function
"""

scalar DateTime

input Authentication {
  customerId: ID!
  sessionId: String!
}

type DeletedItem {
  "Human-readable response from API"
  message: String

  "Was the operation successful?"
  success: Boolean
}

type Query {
  """
  Test the validity of a session
  Arguments expected:
  - email
  - token (session ID)
  """
  authenticate(email: String, token: String): Login

  """
  If email does not exist in database, customer will be created.
  """
  login(email: String): Login

  """
  Login via API key
  """
  loginKey(key: String): LoginKeyResponse

  """
  Developer key query
  - check for proof of a key's existence
  - enter customer ID to obtain key
  """
  key(auth: Authentication): DeveloperKeyResponse



  customer(email: String, id: ID, username: String): Customer



  domain(id: ID, name: String, unicode: String): SLD
  domains(owner: ID): [SLD]



  search(
    pagination: PaginationVariables = {},
    name: String,
    tld: String,
    unicode: String
  ): DomainSearchResults
}

type Mutation {
  """
  Create developer key
  - this automatically deletes prior keys
  """
  createKey(auth: Authentication!): DeveloperKeyResponse

  """
  Create an authenticated session
  Arguments expected:
  - email
  - token
  """
  createSession(email: String, token: String): Login



  """
  Create a domain
  """
  createDomain(auth: Authentication!, detail: SLDInput!): SLDUpdate

  """
  Delete a domain
  """
  deleteDomain(auth: Authentication!, id: ID!): DeletedItem

  """
  Update a domain
  """
  updateDomain(auth: Authentication!, changes: SLDInput!, id: ID!): SLDUpdate



  """
  Delete a customer
  """
  deleteCustomer(auth: Authentication!): DeletedItem

  """
  Export a customer
  """
  exportCustomer(auth: Authentication!): CustomerExport

  """
  Update customer detail
  """
  updateCustomer(auth: Authentication!, changes: CustomerInput!): CustomerUpdate
}
